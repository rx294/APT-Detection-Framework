
		{
			"children": [
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1000",
									"name": "Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1001",
									"name": "Monitor changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1002",
									"name": "Monitor command line invocation of tools capable of modifying the Registry for associated keys.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1003",
									"name": "Monitor for changes in utility arguments aznd the binaries themselves .",
									"type": "url"
								}
							],
							"id": "1004",
							"name": "Accessibility Features",
							"type": "folder",
							"description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo of these accessibility programs are C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed, and C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times. The program \"sethc.exe\" is often referred to as sticky keys, and has been used by adversaries for unauthenticated access through a remote desktop login screen.\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways:\n\nOn Windows XP and Windows Server 2003/R2, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.\n\nOn Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1005",
									"name": "Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1006",
									"name": "Monitor the AppInit_DLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1007",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1008",
									"name": "Look for abnormal process behavior that may be due to a process loading a malicious DLL. ",
									"type": "url"
								}
							],
							"id": "1009",
							"name": "AppInit DLLs",
							"type": "folder",
							"description": "DLLs that are specified in the AppInit_DLLs value in the Registry key HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program. This value can be abused to obtain persistence by causing a DLL to be loaded into most processes on the computer.\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1010",
									"name": "Check for firmware manipulation.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1011",
									"name": "Dump and inspect BIOS images on vulnerable systems and compare against known good images.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1012",
									"name": "Analyze differences to determine if malicious changes have occurred. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1013",
									"name": "Log attempts to read/write to BIOS and compare against known patching behavior. ",
									"type": "url"
								}
							],
							"id": "1014",
							"name": "Basic Input/Output System",
							"type": "folder",
							"description": "The BIOS (Basic Input/Output System), which underlies the functionality of a computer, may be modified to perform or assist in malicious activity.\n\nCapabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.\n\nThe Unified Extensible Firmware Interface (UEFI) is new specification for the interface between platform firmware and a computer operating system."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1015",
									"name": "Perform integrity checking on MBR and VBR. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1016",
									"name": "Take snapshots of MBR and VBR and compare against known good samples. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1017",
									"name": "Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis. ",
									"type": "url"
								}
							],
							"id": "1018",
							"name": "Bootkit",
							"type": "folder",
							"description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1019",
									"name": "Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1020",
									"name": "User file association preferences are stored under [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts and override associations configured under [HKEY_CLASSES_ROOT].",
									"type": "url"
								},
								{
									"children": [],
									"id": "1021",
									"name": "Monitor abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques. ",
									"type": "url"
								}
							],
							"id": "1022",
							"name": "Change Default File Association",
							"type": "folder",
							"description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened. "
						},
						{
							"children": [],
							"id": "1023",
							"name": "Component Firmware",
							"type": "folder",
							"description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to Basic Input/Output System but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1024",
									"name": "Monitor file systems for moving, renaming, replacing, or modifying DLLs.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1025",
									"name": "Monitor for changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1026",
									"name": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1027",
									"name": "Monitor for modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. ",
									"type": "url"
								}
							],
							"id": "1028",
							"name": "DLL Search Order Hijacking",
							"type": "folder",
							"description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.\n\nAdversaries may perform DLL preloading, also called binary planting attacks, by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may use this behavior to cause the program to load a malicious DLL.\n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1029",
									"name": "Type-1 hypervisors may be detected by performing timing analysis.",
									"type": "url"
								}
							],
							"id": "1030",
							"name": "Hypervisor",
							"type": "folder",
							"description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. A type-1 hypervisor operates at a level below the operating system and could be designed with Rootkit functionality to hide its existence from the guest operating system. A malicious hypervisor of this nature could be used to persist on systems through interruption. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1031",
									"name": "Monitor for suspicious account behavior across systems that share accounts, either user, admin, or service accounts.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1032",
									"name": "Alert on events such as ne account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1033",
									"name": "Correlate other security systems with login information (e.g., a user has an active login session but has entered the building or does not have VPN access). ",
									"type": "url"
								}
							],
							"id": "1034",
							"name": "Legitimate Credentials",
							"type": "folder",
							"description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1035",
									"name": "Monitor process API calls to AddMonitor.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1036",
									"name": "Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1037",
									"name": "New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1038",
									"name": "Monitor registry writes to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1039",
									"name": "Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.",
									"type": "url"
								}
							],
							"id": "1040",
							"name": "Local Port Monitor",
							"type": "folder",
							"description": "A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL must be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. Adversaries can use this technique to load malicious code at startup that will persist on system reboot.\n\nThis same functionality is achieved by creating specifically formatted Registry keys at HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1041",
									"name": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1042",
									"name": "Look for files added or modified by unusual accounts outside of normal administration duties. ",
									"type": "url"
								}
							],
							"id": "1043",
							"name": "Logon Scripts",
							"type": "folder",
							"description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1044",
									"name": "Monitor changes to service Registry entries that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1045",
									"name": "Monitor changes to the binary path and the service startup type changed from manual or disabled to automatic.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1046",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1047",
									"name": "Monitor for command-line invocation of tools capable of modifying services.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1048",
									"name": "Collect service utility execution and service binary path arguments used for analysis.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1049",
									"name": "Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1050",
									"name": "Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. ",
									"type": "url"
								}
							],
							"id": "1051",
							"name": "Modify Existing Service",
							"type": "folder",
							"description": "Windows service configuration information, including the file path to the service's executable, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.\n\nAdversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of Masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1052",
									"name": "Monitor service creation through changes in the Registry and common utilities using command-line invocation. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1053",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1054",
									"name": "Look for changes to services that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1055",
									"name": "Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1056",
									"name": "Monitor processes and command-line arguments for actions that could create services.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1057",
									"name": "Services may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. ",
									"type": "url"
								}
							],
							"id": "1058",
							"name": "New Service",
							"type": "folder",
							"description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry.\n\nAdversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1059",
									"name": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1060",
									"name": "Monitor the executing process for process executable paths that are named for partial directories. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1061",
									"name": "Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr\", \"net,\" and \"python\").",
									"type": "url"
								}
							],
							"id": "1062",
							"name": "Path Interception",
							"type": "folder",
							"description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.\n\nThere are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process. "
						},
						{
							"children": [],
							"id": "1063",
							"name": "Redundant Access",
							"type": "folder",
							"description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Legitimate Credentials to use remote services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.\n\nUse of a Web Shell is one such way to maintain access to a network through an externally accessible Web server. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1064",
									"name": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1065",
									"name": "Monitor the start folder for additions or changes. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1066",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1067",
									"name": "Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data. ",
									"type": "url"
								}
							],
							"id": "1068",
							"name": "Registry Run Keys / Start Folder",
							"type": "folder",
							"description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. The program will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1069",
									"name": "Monitor scheduled task creation from common utilities using command-line invocation. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1070",
									"name": "Monitor process execution from the Windows Task Scheduler taskeng.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1071",
									"name": "Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1072",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1073",
									"name": "Look for changes to tasks that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1074",
									"name": "Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1075",
									"name": "Monitor processes and command-line arguments for actions that could be taken to create tasks. ",
									"type": "url"
								}
							],
							"id": "1076",
							"name": "Scheduled Task",
							"type": "folder",
							"description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on.\n\nAn adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1077",
									"name": "Monitor the Registry for changes to the SSP Registry keys. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1078",
									"name": "Monitor the LSA process for DLL loads. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1079",
									"name": "Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8",
									"type": "url"
								}
							],
							"id": "1080",
							"name": "Security Support Provider",
							"type": "folder",
							"description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1081",
									"name": "Monitor for changes to service executables that may normally occur during software updates.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1082",
									"name": "Check if an executable is written, renamed, and/or moved to match an existing service executable.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1083",
									"name": "Hashing of service binaries could be used to detect binary replacement with historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1084",
									"name": "Monitor for abnormal process call trees from unusual services and for execution of other commands.",
									"type": "url"
								}
							],
							"id": "1085",
							"name": "Service File Permissions Weakness",
							"type": "folder",
							"description": "If the file system location of a service executable is user writable, then it may be overwritten by another executable under user permissions and execute as SYSTEM.\n\nAdversaries may use this technique to gain persistence and/or privilege escalation to SYSTEM by replacing the legitimate service executable with their own executable. Once the service is started, either directly by the user (requiring administrator privileges) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1086",
									"name": "Service changes are reflected in the Registry. Modification to existing services should not occur frequently. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1087",
									"name": "Monitor for changes in service binary path location that is not typical for that service and does not correlate with software updates.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1088",
									"name": "Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1089",
									"name": "Look for changes to services that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1090",
									"name": "Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1091",
									"name": "Monitor processes and command-line arguments for actions that could be done to modify services. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1092",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1093",
									"name": "Perform additional logging to monitor services changed through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1094",
							"name": "Service Registry Permissions Weakness",
							"type": "folder",
							"description": "If the permissions for users and groups to access the binPath/ImagePath Registry value for a service are not properly secured, adversaries can change the path to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute. "
						},
						{
							"children": [],
							"id": "1095",
							"name": "Shortcut Modification",
							"type": "folder",
							"description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1096",
									"name": "Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd or accessing files that are not in the Web directory. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1097",
									"name": "File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1098",
									"name": "Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.",
									"type": "url"
								}
							],
							"id": "1099",
							"name": "Web Shell",
							"type": "folder",
							"description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).\n\nWeb shells may serve as Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1100",
									"name": "Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1101",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.",
									"type": "url"
								}
							],
							"id": "1102",
							"name": "WMI Event Subscription",
							"type": "folder",
							"description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. Examples of events that may be subscribed to are the wall clock time or the computer's uptime. Several threat groups have reportedly used this technique to maintain persistence."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1103",
									"name": "Monitor for changes to registry entries in HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1104",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1105",
									"name": "New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1106",
									"name": "Look for abnormal process behavior that may be due to a process loading a malicious DLL. ",
									"type": "url"
								}
							],
							"id": "1107",
							"name": "Winlogon Helper DLL",
							"type": "folder",
							"description": "Winlogon is a part of some Windows versions that performs actions at logon. In Windows systems prior to Windows Vista, a Registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup for persistence. "
						}
					],
					"id": "1108",
					"name": "Persistence",
					"type": "folder",
					"description": "Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1109",
									"name": "Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1110",
									"name": "Monitor changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1111",
									"name": "Monitor command line invocation of tools capable of modifying the Registry for associated keys.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1112",
									"name": "Monitor for changes in utility arguments and the binaries themselves .",
									"type": "url"
								}
							],
							"id": "1113",
							"name": "Accessibility Features",
							"type": "folder",
							"description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo of these accessibility programs are C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed, and C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times. The program \"sethc.exe\" is often referred to as sticky keys, and has been used by adversaries for unauthenticated access through a remote desktop login screen.\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways:\n\nOn Windows XP and Windows Server 2003/R2, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.\n\nOn Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1114",
									"name": "Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1115",
									"name": "Monitor the AppInit_DLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1116",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1117",
									"name": "Look for abnormal process behavior that may be due to a process loading a malicious DLL. ",
									"type": "url"
								}
							],
							"id": "1118",
							"name": "AppInit DLLs",
							"type": "folder",
							"description": "DLLs that are specified in the AppInit_DLLs value in the Registry key HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program. This value can be abused to obtain persistence by causing a DLL to be loaded into most processes on the computer.\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1119",
									"name": "Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1120",
									"name": "Monitor process API calls for behavior that may be indicative of DLL Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes. ",
									"type": "url"
								}
							],
							"id": "1121",
							"name": "Bypass User Account Control",
							"type": "folder",
							"description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nAnother bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1122",
									"name": "API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1123",
									"name": "Monitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1124",
									"name": "Code injection may also be performed using PowerShell with tools such as PowerSploit,so additional PowerShell monitoring may be required to cover known implementations of this behavior. ",
									"type": "url"
								}
							],
							"id": "1125",
							"name": "DLL Injection",
							"type": "folder",
							"description": "DLL injection is used to run code in the context of another process by causing the other process to load and execute code. Running code in the context of another process provides adversaries many benefits, such as access to the process's memory and permissions. It also allows adversaries to mask their actions under a legitimate process. A more sophisticated kind of DLL injection, reflective DLL injection, loads code without calling the normal Windows API calls, potentially bypassing DLL load monitoring. Numerous methods of DLL injection exist on Windows, including modifying the Registry, creating remote threads, Windows hooking APIs, and DLL pre-loading."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1126",
									"name": "Monitor file systems for moving, renaming, replacing, or modifying DLLs.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1127",
									"name": "Monitor for changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1128",
									"name": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1129",
									"name": "Monitor for modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. ",
									"type": "url"
								}
							],
							"id": "1130",
							"name": "DLL Search Order Hijacking",
							"type": "folder",
							"description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.\n\nAdversaries may perform DLL preloading, also called binary planting attacks, by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may use this behavior to cause the program to load a malicious DLL.\n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1131",
									"name": "Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1132",
									"name": "Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files. ",
									"type": "url"
								}
							],
							"id": "1133",
							"name": "Exploitation of Vulnerability",
							"type": "folder",
							"description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1134",
									"name": "Monitor for suspicious account behavior across systems that share accounts, either user, admin, or service accounts.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1135",
									"name": "Alert on events such as ne account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1136",
									"name": "Correlate other security systems with login information (e.g., a user has an active login session but has entered the building or does not have VPN access). ",
									"type": "url"
								}
							],
							"id": "1137",
							"name": "Legitimate Credentials",
							"type": "folder",
							"description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1138",
									"name": "Monitor process API calls to AddMonitor.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1139",
									"name": "Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1140",
									"name": "New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1141",
									"name": "Monitor registry writes to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1142",
									"name": "Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.",
									"type": "url"
								}
							],
							"id": "1143",
							"name": "Local Port Monitor",
							"type": "folder",
							"description": "A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL must be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. Adversaries can use this technique to load malicious code at startup that will persist on system reboot.\n\nThis same functionality is achieved by creating specifically formatted Registry keys at HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1144",
									"name": "Monitor service creation through changes in the Registry and common utilities using command-line invocation. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1145",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1146",
									"name": "Look for changes to services that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1147",
									"name": "Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1148",
									"name": "Monitor processes and command-line arguments for actions that could create services.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1149",
									"name": "Services may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. ",
									"type": "url"
								}
							],
							"id": "1150",
							"name": "New Service",
							"type": "folder",
							"description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry.\n\nAdversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1151",
									"name": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1152",
									"name": "Monitor the executing process for process executable paths that are named for partial directories. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1153",
									"name": "Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr\", \"net,\" and \"python\").",
									"type": "url"
								}
							],
							"id": "1154",
							"name": "Path Interception",
							"type": "folder",
							"description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.\n\nThere are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1155",
									"name": "Monitor scheduled task creation from common utilities using command-line invocation. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1156",
									"name": "Monitor process execution from the Windows Task Scheduler taskeng.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1157",
									"name": "Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1158",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1159",
									"name": "Look for changes to tasks that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1160",
									"name": "Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1161",
									"name": "Monitor processes and command-line arguments for actions that could be taken to create tasks. ",
									"type": "url"
								}
							],
							"id": "1162",
							"name": "Scheduled Task",
							"type": "folder",
							"description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on.\n\nAn adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1163",
									"name": "Monitor for changes to service executables that may normally occur during software updates.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1164",
									"name": "Check if an executable is written, renamed, and/or moved to match an existing service executable.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1165",
									"name": "Hashing of service binaries could be used to detect binary replacement with historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1166",
									"name": "Monitor for abnormal process call trees from unusual services and for execution of other commands.",
									"type": "url"
								}
							],
							"id": "1167",
							"name": "Service File Permissions Weakness",
							"type": "folder",
							"description": "If the file system location of a service executable is user writable, then it may be overwritten by another executable under user permissions and execute as SYSTEM.\n\nAdversaries may use this technique to gain persistence and/or privilege escalation to SYSTEM by replacing the legitimate service executable with their own executable. Once the service is started, either directly by the user (requiring administrator privileges) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1168",
									"name": "Service changes are reflected in the Registry. Modification to existing services should not occur frequently. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1169",
									"name": "Monitor for changes in service binary path location that is not typical for that service and does not correlate with software updates.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1170",
									"name": "Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1171",
									"name": "Look for changes to services that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1172",
									"name": "Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1173",
									"name": "Monitor processes and command-line arguments for actions that could be done to modify services. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1174",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1175",
									"name": "Perform additional logging to monitor services changed through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1176",
							"name": "Service Registry Permissions Weakness",
							"type": "folder",
							"description": "If the permissions for users and groups to access the binPath/ImagePath Registry value for a service are not properly secured, adversaries can change the path to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1177",
									"name": "Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd or accessing files that are not in the Web directory. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1178",
									"name": "File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1179",
									"name": "Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.",
									"type": "url"
								}
							],
							"id": "1180",
							"name": "Web Shell",
							"type": "folder",
							"description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).\n\nWeb shells may serve as Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed. "
						}
					],
					"id": "1181",
					"name": "Privilege Escalation",
					"type": "folder",
					"description": "Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. Adversaries can enter a system with unprivileged access and must take advantage of a system weakness to obtain local administrator or SYSTEM privileges. A user account with administrator-like access can also be used. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1182",
									"name": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1183",
									"name": "When executed, the resulting process from padded files may also exhibit other malware behavior characteristics which could be used as event indicators that point to the source file. ",
									"type": "url"
								}
							],
							"id": "1184",
							"name": "Binary Padding",
							"type": "folder",
							"description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists. "
						},
						{
							"children": [],
							"id": "1185",
							"name": "Bypass User Account Control",
							"type": "folder",
							"description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nAnother bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity"
						},
						{
							"children": [
								{
									"children": [],
									"id": "1186",
									"name": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. ",
									"type": "url"
								}
							],
							"id": "1187",
							"name": "Code Signing",
							"type": "folder",
							"description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries. The certificates used during an operation may be created, forged, or stolen by the adversary.\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system. "
						},
						{
							"children": [],
							"id": "1188",
							"name": "Component Firmware",
							"type": "folder",
							"description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to Basic Input/Output System but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1189",
									"name": "API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1190",
									"name": "Monitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1191",
									"name": "Code injection may also be performed using PowerShell with tools such as PowerSploit,so additional PowerShell monitoring may be required to cover known implementations of this behavior. ",
									"type": "url"
								}
							],
							"id": "1192",
							"name": "DLL Injection",
							"type": "folder",
							"description": "DLL injection is used to run code in the context of another process by causing the other process to load and execute code. Running code in the context of another process provides adversaries many benefits, such as access to the process's memory and permissions. It also allows adversaries to mask their actions under a legitimate process. A more sophisticated kind of DLL injection, reflective DLL injection, loads code without calling the normal Windows API calls, potentially bypassing DLL load monitoring. Numerous methods of DLL injection exist on Windows, including modifying the Registry, creating remote threads, Windows hooking APIs, and DLL pre-loading."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1193",
									"name": "Monitor file systems for moving, renaming, replacing, or modifying DLLs.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1194",
									"name": "Monitor for changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1195",
									"name": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1196",
									"name": "Monitor for modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. ",
									"type": "url"
								}
							],
							"id": "1197",
							"name": "DLL Search Order Hijacking",
							"type": "folder",
							"description": "Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence.\n\nAdversaries may perform DLL preloading, also called binary planting attacks, by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may use this behavior to cause the program to load a malicious DLL.\n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1198",
									"name": "Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1199",
									"name": "Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. ",
									"type": "url"
								}
							],
							"id": "1200",
							"name": "DLL Side-Loading",
							"type": "folder",
							"description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.\n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1201",
									"name": "Monitor processes and command-line arguments to see if security tools are killed or stop running. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1202",
									"name": "Monitor Registry edits for modifications to services and startup programs that correspond to security tools. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1203",
									"name": "Lack of log or event file reporting may be suspicious.",
									"type": "url"
								}
							],
							"id": "1204",
							"name": "Disabling Security Tools",
							"type": "folder",
							"description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1205",
									"name": "Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1206",
									"name": "Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files. ",
									"type": "url"
								}
							],
							"id": "1207",
							"name": "Exploitation of Vulnerability",
							"type": "folder",
							"description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1208",
									"name": "Monitor for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1209",
									"name": "Monitor for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. ",
									"type": "url"
								}
							],
							"id": "1210",
							"name": "File Deletion",
							"type": "folder",
							"description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1211",
									"name": "Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1212",
									"name": "Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1213",
									"name": "Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended. ",
									"type": "url"
								}
							],
							"id": "1214",
							"name": "File System Logical Offsets",
							"type": "folder",
							"description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.\n\nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1215",
									"name": "Detect lack of reported activity from a host sensor or if systems stop reporting all data or only certain kinds of data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1216",
									"name": "Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. ",
									"type": "url"
								}
							],
							"id": "1217",
							"name": "Indicator Blocking",
							"type": "folder",
							"description": "An adversary may attempt to block indicators or events from leaving the host machine. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process or creating a host-based firewall rule to block traffic to a specific server. "
						},
						{
							"children": [],
							"id": "1218",
							"name": "Indicator Removal from Tools",
							"type": "folder",
							"description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1219",
									"name": "File system monitoring may be used to detect improper deletion or modification of indicator files. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1220",
									"name": "Events not stored on the file system will require different detection mechanisms. ",
									"type": "url"
								}
							],
							"id": "1221",
							"name": "Indicator Removal on Host",
							"type": "folder",
							"description": "Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1222",
									"name": "Use process monitoring to monitor the execution and arguments of InstallUtil.exe.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1223",
									"name": "Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1224",
									"name": "Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed. ",
									"type": "url"
								}
							],
							"id": "1225",
							"name": "InstallUtil",
							"type": "folder",
							"description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1226",
									"name": "Monitor for suspicious account behavior across systems that share accounts, either user, admin, or service accounts.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1227",
									"name": "Alert on events such as ne account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1228",
									"name": "Correlate other security systems with login information (e.g., a user has an active login session but has entered the building or does not have VPN access). ",
									"type": "url"
								}
							],
							"id": "1229",
							"name": "Legitimate Credentials",
							"type": "folder",
							"description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1230",
									"name": "Compare hashlists of files from trusted locations to whitelisted file hashses such as NSRL list.",
									"type": "url"
								}
							],
							"id": "1231",
							"name": "Masquerading",
							"type": "folder",
							"description": "Masquerading occurs when a malicious executable is placed in a commonly trusted location (such as C:\\Windows\\System32) or named with a common name (such as \"explorer.exe\" or \"svchost.exe\") to bypass tools that trust executables by relying on file name or path. This also may be done to deceive defenders and system administrators into thinking a file is benign by name association to something that is known to be legitimate. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1232",
									"name": "Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1233",
									"name": "Changes could also include new services and modification of existing binary paths to point to malicious files. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1234",
									"name": "If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1235",
									"name": "Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1236",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1237",
									"name": "Information may also be acquired through Windows system management tools such as WMI and PowerShell, which may require additional logging. ",
									"type": "url"
								}
							],
							"id": "1238",
							"name": "Modify Registry",
							"type": "folder",
							"description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).\n\nThe Registry of a remote system may be modified to aid in execution of files as part of Lateral Movement. It requires the remote Registry service to be running on the target system. Often Legitimate Credentials are required, along with access to the remote system's Windows Admin Shares for RPC communication."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1239",
									"name": "Forensic techniques exist to identify information stored in Extended Attributes(EA).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1240",
									"name": "Monitor NTFS for writes or reads to NTFS EA or to regularly scan for the presence of modified information. ",
									"type": "url"
								}
							],
							"id": "1241",
							"name": "NTFS Extended Attributes",
							"type": "folder",
							"description": "Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.\n\nThe NTFS format has a feature called Extended Attributes (EA), which allows data to be stored as an attribute of a file or folder."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1242",
									"name": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1243",
									"name": "If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file. ",
									"type": "url"
								}
							],
							"id": "1244",
							"name": "Obfuscated Files or Information",
							"type": "folder",
							"description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1245",
									"name": "Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1246",
									"name": "Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions. ",
									"type": "url"
								}
							],
							"id": "1247",
							"name": "Process Hollowing",
							"type": "folder",
							"description": "Process hollowing occurs when a process is created in a suspended state and the process's memory is replaced with the code of a second program so that the second program runs instead of the original program. Windows and process monitoring tools believe the original process is running, whereas the actual program running is different.\n\nProcess hollowing may be used similarly to DLL Injection to evade defenses and detection analysis of malicious process execution by launching adversary-controlled code under the context of a legitimate process."
						},
						{
							"children": [],
							"id": "1248",
							"name": "Redundant Access",
							"type": "folder",
							"description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Legitimate Credentials to use remote services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.\n\nUse of a Web Shell is one such way to maintain access to a network through an externally accessible Web server. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1249",
									"name": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1250",
									"name": "Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1251",
									"name": "Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed. ",
									"type": "url"
								}
							],
							"id": "1252",
							"name": "Regsvcs/Regasm",
							"type": "folder",
							"description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1253",
									"name": "Use process monitoring to monitor the execution and arguments of regsvr32.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1254",
									"name": "Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1255",
									"name": "Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. ",
									"type": "url"
								}
							],
							"id": "1256",
							"name": "Regsvr32",
							"type": "folder",
							"description": "Regsvr32 is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32 can be used to execute arbitrary binaries.\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32 for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32 can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32 is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1257",
									"name": "Some rootkit protections may be built into anti-virus or operating system software. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1258",
									"name": "Use dedicated rootkit detection tools that look for specific types of rootkit behavior. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1259",
									"name": "Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR.",
									"type": "url"
								}
							],
							"id": "1260",
							"name": "Rootkit",
							"type": "folder",
							"description": " Rootkits are programs that hide the existence of malware by intercepting and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the Basic Input/Output System.\n\nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1261",
									"name": "Use process monitoring to monitor the execution and arguments of rundll32.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1262",
									"name": "Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1263",
									"name": "Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. ",
									"type": "url"
								}
							],
							"id": "1264",
							"name": "Rundll32",
							"type": "folder",
							"description": "The rundll32 program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32 for normal operations. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1265",
									"name": "If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1266",
									"name": "If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1267",
									"name": "Scripts should be captured from the file system when possible to determine their actions and intent.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1268",
									"name": "Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1269",
									"name": "Monitor processes and command-line arguments for script execution and subsequent behavior. ",
									"type": "url"
								}
							],
							"id": "1270",
							"name": "Scripting",
							"type": "folder",
							"description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit, Veil, and PowerSploit3 are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell."
						},
						{
							"children": [],
							"id": "1271",
							"name": "Software Packing",
							"type": "folder",
							"description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1272",
									"name": "Forensic techniques exist to detect aspects of files that have had their timestamps modified.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1273",
									"name": "It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values. ",
									"type": "url"
								}
							],
							"id": "1274",
							"name": "Timestomp",
							"type": "folder",
							"description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools."
						}
					],
					"id": "1275",
					"name": "Defense Evasion",
					"type": "folder",
					"description": "Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. Defense evasion may be considered a set of attributes the adversary applies to all other phases of the operation. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1276",
									"name": "Monitor authentication logs for system and application login failures on Legitimate Credentials. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1277",
									"name": "If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. ",
									"type": "url"
								}
							],
							"id": "1278",
							"name": "Brute Force",
							"type": "folder",
							"description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\nCredential Dumping to obtain password hashes may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network.\n\nAdversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies."
						},
						{
							"children": [],
							"id": "1279",
							"name": "Credential Dumping",
							"type": "folder",
							"description": "Credential dumping is the process of obtaining account login and password information from the operating system and software. Credentials can be used to perform Lateral Movement and access restricted information.\n\nTools may dump credentials in many different ways: extracting credential hashes for offline cracking, extracting plaintext passwords, and extracting Kerberos tickets, among others. Examples of credential dumpers include pwdump7, Windows Credential Editor, Mimikatz, and gsecdump. These tools are in use by both professional security testers and adversaries.\n\nPlaintext passwords can be obtained using tools such as Mimikatz to extract passwords stored by the Local Security Authority (LSA). If smart cards are used to authenticate to a domain using a personal identification number (PIN), then that PIN is also cached as a result and may be dumped."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1280",
									"name": "Monitor for creation or modification of accounts in correlation with other suspicious activity.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1281",
									"name": "Use of credentials may also occur at unusual times or to unusual systems or services and may correlate with other suspicious activity. ",
									"type": "url"
								}
							],
							"id": "1282",
							"name": "Credential Manipulation",
							"type": "folder",
							"description": "Account creation and manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of creating new credentials, modifying permissions, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1283",
									"name": "Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password.",
									"type": "url"
								}
							],
							"id": "1284",
							"name": "Credentials in Files",
							"type": "folder",
							"description": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1285",
									"name": "Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1286",
									"name": "Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files. ",
									"type": "url"
								}
							],
							"id": "1287",
							"name": "Exploitation of Vulnerability",
							"type": "folder",
							"description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1288",
									"name": "Monitor for keyloggers, ommonly used API calls include SetWindowsHook, GetKeyState, and GetAsynceyState.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1289",
									"name": "Monitor the Registry and file system for such changes and detect driver installs, as well as looking for common keylogging API calls. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1290",
									"name": "API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1291",
									"name": "Monitor the Registry for the addition of a Custom Credential Provider. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1292",
									"name": "Detection of compromised Legitimate Credentials in use by adversaries may help to catch the result of user input interception if new techniques are used. ",
									"type": "url"
								}
							],
							"id": "1293",
							"name": "Input Capture",
							"type": "folder",
							"description": "Adversaries can use methods of capturing user input for obtaining credentials for Legitimate Credentials and information Collection that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider.\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1294",
									"name": "Detecting the events leading up to sniffing network traffic may be the best method of detection.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1295",
									"name": "Monitor for indicators of man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1296",
									"name": "Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1297",
									"name": "Auditing administrator logins, configuration changes, and device images is required to detect malicious changes. ",
									"type": "url"
								}
							],
							"id": "1298",
							"name": "Network Sniffing",
							"type": "folder",
							"description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n\nUser credentials may be sent over an insecure, unencrypted protocol that can be captured and obtained through network packet analysis. An adversary may place a network interface into promiscuous mode, using a utility to capture traffic in transit over the network or use span ports to capture a larger amount of data. In addition, Address Resolution Protocol (ARP) and Domain Name Service (DNS) poisoning can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary. "
						},
						{
							"children": [],
							"id": "1299",
							"name": "Two-Factor Authentication Interception",
							"type": "folder",
							"description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.\n\nIf a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.\n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.\n\nOther hardware tokens, such as RSA SecurID, require the adversary to have access to the physical device or the seed and algorithm in addition to the corresponding credentials. "
						}
					],
					"id": "1300",
					"name": "Credential Access",
					"type": "folder",
					"description": "Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. This allows the adversary to assume the identity of the account, with all of that account's permissions on the system and network, and makes it harder for defenders to detect the adversary. With sufficient access within a network, an adversary can create accounts for later use within the environment. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1301",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1302",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1303",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1304",
							"name": "Account Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to get a listing of local system or domain accounts. Example commands that can acquire this information are net user, net group <groupname>, and net localgroup <groupname> using the Net utility or through use of dsquery. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, System Owner/User Discovery may apply. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1305",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1306",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1307",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1308",
							"name": "Application Window Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1309",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1310",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1311",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1312",
							"name": "File and Directory Discovery",
							"type": "folder",
							"description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Example utilities used to obtain this information are dir and tree. Custom tools may also be used to gather file and directory information and interact with the Windows API.  "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1313",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1314",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1315",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1316",
							"name": "Local Network Configuration Discovery",
							"type": "folder",
							"description": "Adversaries will likely look for details about the network configuration and settings of systems they access. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1317",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1318",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1319",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1320",
							"name": "Local Network Connections Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to get a listing of network connections to or from the compromised system. Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1321",
									"name": "Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1322",
									"name": "Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1323",
									"name": "Network intrusion detection systems can also be used to identify scanning activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1324",
									"name": "Monitor for process use of the networks and inspect intra-network flows to detect port scans. ",
									"type": "url"
								}
							],
							"id": "1325",
							"name": "Network Service Scanning",
							"type": "folder",
							"description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1326",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1327",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1328",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1329",
							"name": "Peripheral Device Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1330",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1331",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1332",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1333",
							"name": "Permission Groups Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to find local system or domain-level groups and permissions settings. Examples of commands that can list groups are net group /domain and net localgroup using the Net utility. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1334",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1335",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1336",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1337",
							"name": "Process Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to get information about running processes on a system. An example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.\n\nInformation obtained could be used to gain an understanding of common software running on systems within the network. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1338",
									"name": "Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1339",
									"name": "Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1340",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1341",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. ",
									"type": "url"
								}
							],
							"id": "1342",
							"name": "Query Registry",
							"type": "folder",
							"description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Some of the information may help adversaries to further their operation within a network. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1343",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1344",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1345",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1346",
							"name": "Remote System Discovery",
							"type": "folder",
							"description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. Examples of tools and commands that acquire this information include \"ping\" or \"net view\" using Net. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1347",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1348",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1349",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1350",
							"name": "Security Software Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.\n\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1351",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1352",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1353",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1354",
							"name": "System Information Discovery",
							"type": "folder",
							"description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Example commands and utilities that obtain this information include ver, Systeminfo, and dir within cmd for identifying information based on present files and directories. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1355",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1356",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1357",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1358",
							"name": "System Owner/User Discovery",
							"type": "folder",
							"description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1359",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1360",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1361",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1362",
							"name": "System Service Discovery",
							"type": "folder",
							"description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well. "
						}
					],
					"id": "1363",
					"name": "Discovery",
					"type": "folder",
					"description": "Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1364",
									"name": "Monitor application deployments from a secondary system. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1365",
									"name": "Perform application deployment at regular times so that irregular deployment activity stands out. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1366",
									"name": "Monitor process activity that does not correlate to known good software. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1367",
									"name": "Monitor account login activity on the deployment system. ",
									"type": "url"
								}
							],
							"id": "1368",
							"name": "Application Deployment Software",
							"type": "folder",
							"description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1369",
									"name": "Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1370",
									"name": "Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files. ",
									"type": "url"
								}
							],
							"id": "1371",
							"name": "Exploitation of Vulnerability",
							"type": "folder",
							"description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1372",
									"name": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1373",
									"name": "Look for files added or modified by unusual accounts outside of normal administration duties. ",
									"type": "url"
								}
							],
							"id": "1374",
							"name": "Logon Scripts",
							"type": "folder",
							"description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1375",
									"name": "Audit all logon and credential use events and review for discrepancies.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1376",
									"name": "Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1377",
									"name": "NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious. ",
									"type": "url"
								}
							],
							"id": "1378",
							"name": "Pass the Hash",
							"type": "folder",
							"description": "Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1379",
									"name": "Audit all Kerberos authentication and credential use events and review for discrepancies. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1380",
									"name": "Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. ",
									"type": "url"
								}
							],
							"id": "1381",
							"name": "Pass the Ticket",
							"type": "folder",
							"description": "Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nIn this technique, valid Kerberos tickets for Legitimate Credentials are captured by Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.\n\nSilver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).\n\nGolden Tickets can be obtained for the domain using the KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1382",
									"name": "Monitor access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1383",
									"name": "Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. ",
									"type": "url"
								}
							],
							"id": "1384",
							"name": "Remote Desktop Protocol",
							"type": "folder",
							"description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS.\n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1385",
									"name": "Monitor for file creation and files transferred within a network over SMB. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1386",
									"name": "Unusual processes with external network connections creating files on-system may be suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1387",
									"name": "Use of utilities, such as FTP, that does not normally occur may also be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1388",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1389",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1390",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1391",
							"name": "Remote File Copy",
							"type": "folder",
							"description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP.\n\nAdversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with Windows Admin Shares or Remote Desktop Protocol. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1392",
									"name": "Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1393",
									"name": "Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. ",
									"type": "url"
								}
							],
							"id": "1394",
							"name": "Remote Services",
							"type": "folder",
							"description": "An adversary may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1395",
									"name": "Monitor file access on removable media. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1396",
									"name": "Detect processes that execute from removable media after it is mounted or when initiated by a user. ",
									"type": "url"
								}
							],
							"id": "1397",
							"name": "Replication Through Removable Media",
							"type": "folder",
							"description": "Adversaries may move to additional systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into another system and executes. This may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1398",
									"name": "Use file and process monitoring to detect when files are written to a Web server by a process that is not the normal Web server process ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1399",
									"name": "Monitor to detect when files are written outside of normal administrative time periods. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1400",
									"name": "Use process monitoring to identify normal processes that run on the Web server and detect processes that are not typically executed. ",
									"type": "url"
								}
							],
							"id": "1401",
							"name": "Shared Webroot",
							"type": "folder",
							"description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.\n\nThis mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1402",
									"name": "Processes that write or overwrite many files to a network shared directory may be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1403",
									"name": "Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections.",
									"type": "url"
								}
							],
							"id": "1404",
							"name": "Taint Shared Content",
							"type": "folder",
							"description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1405",
									"name": "Analyze the process execution trees, historical activities from the third-party application, and the resulting activities or events from the file/binary/script pushed to systems.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1406",
									"name": "Audit third-party applications logs of their own that can be collected and correlated with other data from the environment. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1407",
									"name": "Audit software deployment logs and look for suspicious or unauthorized activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1408",
									"name": "A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1409",
									"name": "Perform application deployment at regular times so that irregular deployment activity stands out. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1410",
									"name": "Monitor process activity that does not correlate to known good software. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1411",
									"name": "Monitor account login activity on the deployment system. ",
									"type": "url"
								}
							],
							"id": "1412",
							"name": "Third-party Software",
							"type": "folder",
							"description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1413",
									"name": "Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1414",
									"name": "Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1415",
									"name": "Monitor remote login events and associated SMB activity for file transfers and remote process execution. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1416",
									"name": "Monitor the actions of remote users who connect to administrative shares. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1417",
									"name": "Monitor for use of tools and commands to connect to remote shares, such as Net, on the command-line interface and Discovery techniques that could be used to find remotely accessible systems. ",
									"type": "url"
								}
							],
							"id": "1418",
							"name": "Windows Admin Shares",
							"type": "folder",
							"description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$.\n\nAdversaries may use this technique in conjunction with administrator-level Legitimate Credentials to remotely access a networked system over server message block (SMB) to interact with systems using remote procedure calls (RPCs),transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.\n\nThe Net utility can be used to connect to Windows admin shares on remote systems with valid credentials to enable lateral movement. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1419",
									"name": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1420",
									"name": "Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. ",
									"type": "url"
								}
							],
							"id": "1421",
							"name": "Windows Remote Management",
							"type": "folder",
							"description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell."
						}
					],
					"id": "1422",
					"name": "Lateral Movement",
					"type": "folder",
					"description": "Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool.\n\nAn adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect. The ability to remotely execute scripts or code can be a feature of adversary remote access tools, but adversaries may also reduce their tool footprint on the network by using legitimate credentials alongside inherent network and operating system functionality to remotely connect to systems.\n\nMovement across a network from one system to another may be necessary to achieve an adversary’s goals. Thus lateral movement, and the techniques that lateral movement relies on, are often very important to an adversary's set of capabilities and part of a broader set of information and access dependencies that the adversary takes advantage of within a network. To understand intrinsic security dependencies, it is important to know the relationships between accounts and access privileges across all systems on a network. Lateral movement may not always be a requirement for an adversary. If an adversary can reach the goal with access to the initial system, then additional movement throughout a network may be unnecessary. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1423",
									"name": "Command-line interface activities can be captured through proper logging of process execution with command-line arguments. ",
									"type": "url"
								}
							],
							"id": "1424",
							"name": "Command-Line Interface",
							"type": "folder",
							"description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. One example command-line interface on Windows systems is cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation. "
						},
						{
							"children": [],
							"id": "1425",
							"name": "Execution through API",
							"type": "folder",
							"description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1426",
									"name": "Unknown or unusual process launches outside of normal behavior on a particular system occurring through remote interactive sessions are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1427",
									"name": "Collect and audit security logs that may indicate access to and use of Legitimate Credentials to access remote systems within the network. ",
									"type": "url"
								}
							],
							"id": "1428",
							"name": "Graphical User Interface",
							"type": "folder",
							"description": "Cause a binary or script to execute based on interacting with the file through a graphical user interface (GUI) or in an interactive remote session such as Remote Desktop Protocol. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1429",
									"name": "Use process monitoring to monitor the execution and arguments of InstallUtil.exe.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1430",
									"name": "Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1431",
									"name": "Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed. ",
									"type": "url"
								}
							],
							"id": "1432",
							"name": "InstallUtil",
							"type": "folder",
							"description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1433",
									"name": "Monitor Powershell logs for suspicios commands or excecution.",
									"type": "url"
								}
							],
							"id": "1434",
							"name": "PowerShell",
							"type": "folder",
							"description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer.\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, and PSAttack."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1435",
									"name": "Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1436",
									"name": "Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions. ",
									"type": "url"
								}
							],
							"id": "1437",
							"name": "Process Hollowing",
							"type": "folder",
							"description": "Process hollowing occurs when a process is created in a suspended state and the process's memory is replaced with the code of a second program so that the second program runs instead of the original program. Windows and process monitoring tools believe the original process is running, whereas the actual program running is different.\n\nProcess hollowing may be used similarly to DLL Injection to evade defenses and detection analysis of malicious process execution by launching adversary-controlled code under the context of a legitimate process."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1438",
									"name": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1439",
									"name": "Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1440",
									"name": "Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed. ",
									"type": "url"
								}
							],
							"id": "1441",
							"name": "Regsvcs/Regasm",
							"type": "folder",
							"description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1442",
									"name": "Use process monitoring to monitor the execution and arguments of regsvr32.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1443",
									"name": "Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1444",
									"name": "Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. ",
									"type": "url"
								}
							],
							"id": "1445",
							"name": "Regsvr32",
							"type": "folder",
							"description": "Regsvr32 is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32 can be used to execute arbitrary binaries.\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32 for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32 can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32 is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1446",
									"name": "Use process monitoring to monitor the execution and arguments of rundll32.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1447",
									"name": "Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1448",
									"name": "Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. ",
									"type": "url"
								}
							],
							"id": "1449",
							"name": "Rundll32",
							"type": "folder",
							"description": "The rundll32 program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32 for normal operations. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1450",
									"name": "Monitor scheduled task creation from common utilities using command-line invocation. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1451",
									"name": "Monitor process execution from the Windows Task Scheduler taskeng.exe. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1452",
									"name": "Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1453",
									"name": "Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1454",
									"name": "Look for changes to tasks that do not correlate with known software, patch cycles, etc. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1455",
									"name": "Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1456",
									"name": "Monitor processes and command-line arguments for actions that could be taken to create tasks. ",
									"type": "url"
								}
							],
							"id": "1457",
							"name": "Scheduled Task",
							"type": "folder",
							"description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on.\n\nAn adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1458",
									"name": "If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1459",
									"name": "If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1460",
									"name": "Scripts should be captured from the file system when possible to determine their actions and intent.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1461",
									"name": "Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1462",
									"name": "Monitor processes and command-line arguments for script execution and subsequent behavior. ",
									"type": "url"
								}
							],
							"id": "1463",
							"name": "Scripting",
							"type": "folder",
							"description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit, Veil, and PowerSploit3 are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1464",
									"name": "Monitor for changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc..",
									"type": "url"
								}
							],
							"id": "1465",
							"name": "Service Execution",
							"type": "folder",
							"description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1466",
									"name": "Analyze the process execution trees, historical activities from the third-party application, and the resulting activities or events from the file/binary/script pushed to systems.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1467",
									"name": "Audit third-party applications logs of their own that can be collected and correlated with other data from the environment. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1468",
									"name": "Audit software deployment logs and look for suspicious or unauthorized activity. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1469",
									"name": "A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1470",
									"name": "Perform application deployment at regular times so that irregular deployment activity stands out. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1471",
									"name": "Monitor process activity that does not correlate to known good software. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1472",
									"name": "Monitor account login activity on the deployment system. ",
									"type": "url"
								}
							],
							"id": "1473",
							"name": "Third-party Software",
							"type": "folder",
							"description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1474",
									"name": "Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1475",
									"name": "Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior.",
									"type": "url"
								}
							],
							"id": "1476",
							"name": "Windows Management Instrumentation",
							"type": "folder",
							"description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1477",
									"name": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1478",
									"name": "Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. ",
									"type": "url"
								}
							],
							"id": "1479",
							"name": "Windows Remote Management",
							"type": "folder",
							"description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell."
						}
					],
					"id": "1480",
					"name": "Execution",
					"type": "folder",
					"description": "The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1481",
									"name": "Monitor for common file system commands and parameters on the command-line interface within batch files or scripts.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1482",
									"name": "Automated collection may occur along with other techniques such as Data Staged.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1483",
									"name": "Unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1484",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1485",
									"name": "Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1486",
							"name": "Automated Collection",
							"type": "folder",
							"description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.\n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Remote File Copy to identify and move files. "
						},
						{
							"children": [],
							"id": "1487",
							"name": "Clipboard Data",
							"type": "folder",
							"description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications.\n\nApplications can access clipboard data by using the Windows API."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1488",
									"name": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1489",
									"name": "Monitor processes and command-line arguments for actions that could be taken to collect and combine files.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1490",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1491",
									"name": "Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1492",
							"name": "Data Staged",
							"type": "folder",
							"description": "Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Data Compressed or Data Encrypted.\n\nInteractive command shells may be used, and common functionality within cmd may be used to copy data into a staging location. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1493",
									"name": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1494",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1495",
									"name": "Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1496",
							"name": "Data from Local System",
							"type": "folder",
							"description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Exfiltration.\n\nAdversaries will often search the file system on computers they have compromised to find files of interest. They may do this using a Command-Line Interface, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1497",
									"name": "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1498",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1499",
									"name": "Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1500",
							"name": "Data from Network Shared Drive",
							"type": "folder",
							"description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.\n\nAdversaries may search network shares on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1501",
									"name": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1502",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather data.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1503",
									"name": "Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1504",
							"name": "Data from Removable Media",
							"type": "folder",
							"description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.\n\nAdversaries may search connected removable media on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1505",
									"name": "Monitor processes and command-line arguments for actions that could be taken to gather local email files.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1506",
									"name": "Remote access tools with built-in features may interact directly with the Windows API to gather information.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1507",
									"name": "Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
									"type": "url"
								}
							],
							"id": "1508",
							"name": "Email Collection",
							"type": "folder",
							"description": "Adversaries may target user email to collect sensitive information from a target.\n\nFiles containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.\n\nAdversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.\n\nSome adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1509",
									"name": "Monitor for keyloggers, ommonly used API calls include SetWindowsHook, GetKeyState, and GetAsynceyState.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1510",
									"name": "Monitor the Registry and file system for such changes and detect driver installs, as well as looking for common keylogging API calls. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1511",
									"name": "API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1512",
									"name": "Monitor the Registry for the addition of a Custom Credential Provider. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1513",
									"name": "Detection of compromised Legitimate Credentials in use by adversaries may help to catch the result of user input interception if new techniques are used. ",
									"type": "url"
								}
							],
							"id": "1514",
							"name": "Input Capture",
							"type": "folder",
							"description": "Adversaries can use methods of capturing user input for obtaining credentials for Legitimate Credentials and information Collection that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider.\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1515",
									"name": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1516",
									"name": "Monitor for unusual processes using API calls used to obtain image data, and monitoring for image files written to disk.",
									"type": "url"
								}
							],
							"id": "1517",
							"name": "Screen Capture",
							"type": "folder",
							"description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. "
						}
					],
					"id": "1518",
					"name": "Collection",
					"type": "folder",
					"description": "The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1519",
									"name": "Monitor process file access patterns and network behavior. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1520",
									"name": "Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. ",
									"type": "url"
								}
							],
							"id": "1521",
							"name": "Automated Exfiltration",
							"type": "folder",
							"description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Collection.\n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1522",
									"name": "Process monitoring and monitoring for command-line arguments for known compression utilities.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1523",
									"name": "Ccompressed files can be detected in transit during exfiltration with a IDS or DLP system analyzing file headers.",
									"type": "url"
								}
							],
							"id": "1524",
							"name": "Data Compressed",
							"type": "folder",
							"description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1525",
									"name": "Process monitoring and monitoring for command-line arguments for known encryption utilities.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1526",
									"name": "Look for encryption key is stated within command-line invocation of the software.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1527",
									"name": "A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1528",
									"name": "Network traffic may also be analyzed for entropy to determine if encrypted data is being transmitted.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1529",
									"name": "Encrypted files of known file types can be detected in transit during exfiltration with a IDS or DLP system analyzing file headers.",
									"type": "url"
								}
							],
							"id": "1530",
							"name": "Data Encrypted",
							"type": "folder",
							"description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1531",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1532",
									"name": "Monitor for prolonged connections that  consistently sends fixed size data packets",
									"type": "url"
								},
								{
									"children": [],
									"id": "1533",
									"name": "Monitor for process that opens connections and sends fixed sized data packets at regular intervals.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1534",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1535",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1536",
							"name": "Data Transfer Size Limits",
							"type": "folder",
							"description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1537",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1538",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1539",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ",
									"type": "url"
								}
							],
							"id": "1540",
							"name": "Exfiltration Over Alternative Protocol",
							"type": "folder",
							"description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1541",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1542",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1543",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1544",
							"name": "Exfiltration Over Cmd & Ctrl Channel",
							"type": "folder",
							"description": "Data exfiltration is performed over the Command and Control channel. Data is encoded into the normal communications channel using the same protocol as command and control communications."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1545",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1546",
									"name": "Processes that normally require user-driven events to access the network but access the network without such may be malicious.",
									"type": "url"
								}
							],
							"id": "1547",
							"name": "Exfiltration Over Other Network Medium",
							"type": "folder",
							"description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, or Bluetooth. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1548",
									"name": "Monitor file access on removable media. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1549",
									"name": "Detect processes that execute when removable media are mounted. ",
									"type": "url"
								}
							],
							"id": "1550",
							"name": "Exfiltration Over Physical Medium",
							"type": "folder",
							"description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1551",
									"name": "Monitor process file access patterns and network behavior. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1552",
									"name": "Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1553",
									"name": "Monitor for network connections to the same destination that occur at the same time of day for multiple days. ",
									"type": "url"
								}
							],
							"id": "1554",
							"name": "Scheduled Transfer",
							"type": "folder",
							"description": "Data exfiltration may be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol. "
						}
					],
					"id": "1555",
					"name": "Exfiltration",
					"type": "folder",
					"description": "Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. "
				},
				{
					"children": [
						{
							"children": [
								{
									"children": [],
									"id": "1556",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1557",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1558",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1559",
							"name": "Commonly Used Port",
							"type": "folder",
							"description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\n    TCP:80 (HTTP)\n    TCP:443 (HTTPS)\n    TCP:25 (SMTP)\n    TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are\n\n    TCP/UDP:135 (RPC)\n    TCP/UDP:22 (SSH)\n    TCP/UDP:3389 (RDP)"
						},
						{
							"children": [
								{
									"children": [],
									"id": "1560",
									"name": "Monitor file access on removable media.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1561",
									"name": "Detect processes that execute when removable media is mounted.",
									"type": "url"
								}
							],
							"id": "1562",
							"name": "Communication Through Removable Media",
							"type": "folder",
							"description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1563",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1564",
									"name": "Network activities disassociated from user-driven actions from processes that normally require user direction are suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1565",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1566",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1567",
							"name": "Connection Proxy",
							"type": "folder",
							"description": "A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.\n\nThe definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.\n\nThe network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1568",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1569",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1570",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1571",
							"name": "Custom Command and Control Protocol",
							"type": "folder",
							"description": "Adversaries may communicate using a custom command and control protocol instead of using existing Standard Application Layer Protocol to encapsulate commands. Implementations could mimic well-known protocols. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1572",
									"name": "It may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1573",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1574",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1575",
									"name": "Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1576",
							"name": "Custom Cryptographic Protocol",
							"type": "folder",
							"description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors."
						},
						{
							"children": [
								{
									"children": [],
									"id": "1577",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1578",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1579",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1580",
							"name": "Data Obfuscation",
							"type": "folder",
							"description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, including Base64 encoding the message body of an HTTP request, adding junk data to protocol traffic, using steganography, or commingling legitimate traffic with C2 communications traffic. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1581",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1582",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1583",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1584",
							"name": "Fallback Channels",
							"type": "folder",
							"description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds. "
						},
						{
							"children": [],
							"id": "1585",
							"name": "Multi-Stage Channels",
							"type": "folder",
							"description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1586",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1587",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1588",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1589",
									"name": "Correlating alerts between multiple communication channels can further help identify command-and-control behavior. ",
									"type": "url"
								}
							],
							"id": "1590",
							"name": "Multiband Communication",
							"type": "folder",
							"description": "Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1591",
									"name": "SSL/TLS inspection can be used to detect command and control traffic within some encrypted communication channels.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1592",
									"name": "After SSL/TLS inspection, additional cryptographic analysis may be needed to analyze the second layer of encryption.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1593",
									"name": "It may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1594",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).",
									"type": "url"
								},
								{
									"children": [],
									"id": "1595",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1596",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1597",
							"name": "Multilayer Encryption",
							"type": "folder",
							"description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1598",
									"name": "Monitor for file creation and files transferred within a network over SMB. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1599",
									"name": "Unusual processes with external network connections creating files on-system may be suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1600",
									"name": "Use of utilities, such as FTP, that does not normally occur may also be suspicious.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1601",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1602",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1603",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1604",
							"name": "Remote File Copy",
							"type": "folder",
							"description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP.\n\nAdversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with Windows Admin Shares or Remote Desktop Protocol. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1605",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1606",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1607",
									"name": "Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1608",
							"name": "Standard Application Layer Protocol",
							"type": "folder",
							"description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1609",
									"name": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1610",
									"name": "SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1611",
									"name": "It may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1612",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1613",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1614",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1615",
							"name": "Standard Cryptographic Protocol",
							"type": "folder",
							"description": "Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.\n\nSome adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1616",
									"name": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.",
									"type": "url"
								},
								{
									"children": [],
									"id": "1617",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1618",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1619",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1620",
							"name": "Standard Non-Application Layer Protocol",
							"type": "folder",
							"description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), and transport layer protocols, such as the User Datagram Protocol (UDP).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications"
						},
						{
							"children": [
								{
									"children": [],
									"id": "1621",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1622",
									"name": "Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1623",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1624",
							"name": "Uncommonly Used Port",
							"type": "folder",
							"description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured. "
						},
						{
							"children": [
								{
									"children": [],
									"id": "1625",
									"name": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1626",
									"name": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). ",
									"type": "url"
								},
								{
									"children": [],
									"id": "1627",
									"name": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.",
									"type": "url"
								}
							],
							"id": "1628",
							"name": "Web Service",
							"type": "folder",
							"description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nPopular websites and social media can act as a mechanism for command and control and give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. "
						}
					],
					"id": "1629",
					"name": "Command and Control",
					"type": "folder",
					"description": "The command and control tactic represents how adversaries communicate with systems under their control within a target network. There are many ways an adversary can establish command and control with various levels of covertness, depending on system configuration and network topology. Due to the wide degree of variation available to the adversary at the network level, only the most common factors were used to describe the differences in command and control. There are still a great many specific techniques within the documented methods, largely due to how easy it is to define new protocols and use existing, legitimate protocols and network services for communication.\n\nThe resulting breakdown should help convey the concept that detecting intrusion through command and control protocols without prior knowledge is a difficult proposition over the long term. Adversaries' main constraints in network-level defense avoidance are testing and deployment of tools to rapidly change their protocols, awareness of existing defensive technologies, and access to legitimate Web services that, when used appropriately, make their tools difficult to distinguish from benign traffic. "
				}
			],
			"id": "6",
			"name": "MITRE ATT&CK Martrix",
			"type": "folder",
			"description": "Test"
		}